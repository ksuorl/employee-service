plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    intTestImplementation.extendsFrom testImplementation
    intTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'mysql:mysql-connector-java:8.0.17'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.springframework.kafka:spring-kafka:3.0.11'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'io.rest-assured:rest-assured:5.3.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
}

tasks.named("bootJar") {
    mainClass = 'com.example.employeeservice.EmployeeServiceApplication'
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    intTest {
        java.srcDir "$projectDir/src/intTest/java"
        resources.srcDir "$projectDir/src/intTest/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()
    testLogging {
        events "passed"
    }
}


